-- ================================================================
-- CORRE√á√ÉO DEFINITIVA: VIEW SEGURA PARA PROTEGER CAMPOS SENS√çVEIS
-- (Vers√£o Corrigida - Views n√£o podem ter pol√≠ticas RLS)
-- ================================================================

-- 1. Criar VIEW com apenas campos n√£o-sens√≠veis da tabela users
CREATE OR REPLACE VIEW public.users_safe AS
SELECT 
  id,
  email,
  nome,
  tipo_usuario,
  ativo,
  criado_em,
  plano,
  subscription_end_date
  -- CAMPOS EXCLU√çDOS (nunca expostos):
  -- senha_hash
  -- stripe_customer_id
  -- subscription_id
  -- subscription_status
FROM public.users;

-- 2. Fazer view usar security_invoker (aplica RLS da tabela base)
ALTER VIEW public.users_safe SET (security_invoker = true);

-- 3. Coment√°rio de documenta√ß√£o
COMMENT ON VIEW public.users_safe IS 
'View segura da tabela users que exclui campos sens√≠veis.
NUNCA exp√µe: senha_hash, stripe_customer_id, subscription_id, subscription_status.
Use esta view em vez de acessar users diretamente para dados n√£o-sens√≠veis.
A view herda as pol√≠ticas RLS da tabela users (security_invoker = true).';

-- ================================================================
-- CRIAR FUN√á√ÉO AUXILIAR PARA OBTER DADOS SEGUROS
-- ================================================================

-- 4. Criar fun√ß√£o auxiliar para obter dados seguros de usu√°rios
CREATE OR REPLACE FUNCTION public.get_safe_user_profile(_user_id UUID)
RETURNS TABLE (
  id UUID,
  email TEXT,
  nome TEXT,
  tipo_usuario tipo_usuario,
  ativo BOOLEAN,
  criado_em TIMESTAMP WITH TIME ZONE,
  plano TEXT,
  subscription_end_date TIMESTAMP WITH TIME ZONE
)
LANGUAGE sql
STABLE
SECURITY DEFINER
SET search_path = public
AS $$
  SELECT 
    id,
    email,
    nome,
    tipo_usuario,
    ativo,
    criado_em,
    plano,
    subscription_end_date
  FROM public.users
  WHERE id = _user_id
  -- Aplicar as mesmas regras da pol√≠tica RLS manualmente
  AND (
    _user_id = auth.uid()
    OR public.is_admin()
    OR _user_id IN (
      SELECT uc.usuario_id
      FROM usuarios_clinicas uc
      WHERE uc.clinica_id IN (
        SELECT clinica_id 
        FROM get_user_clinicas()
      )
      AND uc.ativo = true
    )
  );
$$;

-- 5. Coment√°rio de documenta√ß√£o para a fun√ß√£o
COMMENT ON FUNCTION public.get_safe_user_profile IS 
'Retorna dados seguros de um usu√°rio espec√≠fico, excluindo campos sens√≠veis.
Use esta fun√ß√£o quando precisar buscar dados de usu√°rio de forma segura.
Aplica as mesmas regras de RLS da tabela users.';

-- ================================================================
-- ADICIONAR GRANTS APROPRIADOS
-- ================================================================

-- 6. Garantir que usu√°rios autenticados possam acessar a view segura
GRANT SELECT ON public.users_safe TO authenticated;
GRANT SELECT ON public.users_safe TO anon;

-- ================================================================
-- DOCUMENTA√á√ÉO E AVISOS
-- ================================================================

-- 7. Documenta√ß√£o adicional na tabela users
COMMENT ON TABLE public.users IS 
'‚ö†Ô∏è ATEN√á√ÉO: Esta tabela cont√©m dados EXTREMAMENTE sens√≠veis:
- senha_hash: Hash de senhas (NUNCA deve ser exposto)
- stripe_customer_id: ID do cliente no Stripe (informa√ß√£o de pagamento)
- subscription_id: ID da assinatura (informa√ß√£o de pagamento)
- subscription_status: Status da assinatura (informa√ß√£o de pagamento)

üìã REGRAS DE ACESSO:
1. NUNCA use SELECT * FROM users na aplica√ß√£o
2. SEMPRE use a view users_safe para dados n√£o-sens√≠veis
3. OU use a fun√ß√£o get_safe_user_profile() para buscar dados de usu√°rio espec√≠fico
4. Apenas opera√ß√µes administrativas cr√≠ticas devem acessar campos sens√≠veis diretamente

üîí POL√çTICAS RLS ATIVAS:
- Usu√°rios podem ver apenas seus pr√≥prios dados completos
- Admins podem ver todos os dados
- Usu√°rios da mesma cl√≠nica podem ver dados b√°sicos (via view users_safe)';

-- ================================================================
-- CRIAR FUN√á√ÉO PARA LISTAR USU√ÅRIOS DA CL√çNICA DE FORMA SEGURA
-- ================================================================

-- 8. Fun√ß√£o para listar usu√°rios da cl√≠nica sem expor dados sens√≠veis
CREATE OR REPLACE FUNCTION public.get_clinic_users_safe()
RETURNS TABLE (
  id UUID,
  email TEXT,
  nome TEXT,
  tipo_usuario tipo_usuario,
  ativo BOOLEAN,
  criado_em TIMESTAMP WITH TIME ZONE
)
LANGUAGE sql
STABLE
SECURITY DEFINER
SET search_path = public
AS $$
  SELECT 
    u.id,
    u.email,
    u.nome,
    u.tipo_usuario,
    u.ativo,
    u.criado_em
  FROM public.users u
  WHERE u.id IN (
    SELECT uc.usuario_id
    FROM usuarios_clinicas uc
    WHERE uc.clinica_id IN (
      SELECT clinica_id 
      FROM get_user_clinicas()
    )
    AND uc.ativo = true
  )
  -- Campos sens√≠veis NUNCA s√£o retornados
  ORDER BY u.nome, u.email;
$$;

COMMENT ON FUNCTION public.get_clinic_users_safe IS 
'Lista todos os usu√°rios da cl√≠nica atual de forma segura.
Retorna apenas campos n√£o-sens√≠veis.
NUNCA exp√µe: senha_hash, stripe_customer_id, subscription_id, subscription_status.';

-- ================================================================
-- PROTE√á√ÉO ADICIONAL: DOCUMENTA√á√ÉO DE CAMPOS
-- ================================================================

-- 9. Adicionar coment√°rios nos campos sens√≠veis
COMMENT ON COLUMN public.users.senha_hash IS 'üîí CAMPO EXTREMAMENTE SENS√çVEL - Hash de senha. NUNCA deve ser exposto em queries. Use users_safe view.';
COMMENT ON COLUMN public.users.stripe_customer_id IS 'üîí CAMPO SENS√çVEL - ID do cliente Stripe. Cont√©m informa√ß√£o de pagamento. Use users_safe view.';
COMMENT ON COLUMN public.users.subscription_id IS 'üîí CAMPO SENS√çVEL - ID da assinatura. Cont√©m informa√ß√£o de pagamento. Use users_safe view.';
COMMENT ON COLUMN public.users.subscription_status IS 'üîí CAMPO SENS√çVEL - Status da assinatura. Pode revelar informa√ß√£o financeira. Use users_safe view.';